@model Terz.Models.Report.ReportView

<title>@Model.Report.Titulo</title>

<link rel="stylesheet" href="~/terz/css/Report.css" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<link rel="stylesheet" href="~/terz/LTE/plugins/fontawesome-free/css/all.min.css">



<link rel="stylesheet" href="~/terz/LTE/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/terz/LTE/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">

<!-- Theme style -->



<style>
    .checked {
        color: orange;
    }

    #overlay {
        position: fixed;
        display: none;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 2;
        cursor: pointer;
    }

    #text {
        position: absolute;
        top: 50%;
        left: 50%;
        font-size: 30px;
        color: white;
        transform: translate(-50%,-50%);
        -ms-transform: translate(-50%,-50%);
    }
</style>

<div id="overlay">

    <div id="text"><div style="margin-left:22px" class="loader"></div> Calculando...</div>
</div>

<nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">

        <div class="navbar-header">




            <h4 class="brand brand-name navbar-left" style="margin-top:28px; max-width:500px">@Model.Report.Titulo</h4>
        </div>
        <div class="collapse navbar-collapse navbar-right" id="myNavbar">
            <ul class="nav navbar-nav">
                <li><a href="../terz/Query?id=@Model.Id" style="color:gray;text-decoration:none; margin-left:10px"><i class="fas fa-search"></i> Query</a></li>
                <li><a href="#" style="color:gray;text-decoration:none; margin-left:10px" onclick="ShowInfo()">Sobre</a></li>
                <li><a href="#" style="color:gray;text-decoration:none; margin-left:10px" onclick="ShowReference()">Referências</a></li>
                <li><a href="#" style="color:gray;text-decoration:none" onclick="AvaliatePage()">Avaliar</a></li>
                <li>
                    <a>
                        @if (Model.Report.Avaliacoes.Count > 0)
                        {
                            int i = 1;
                            while (i <= Model.Report.Avaliacoes.Select(a => a.Nota).Average())
                            {
                                <span class="fa fa-star checked"></span>
                                i++;
                            }

                            while (i <= 5)
                            {
                                <span class="fa fa-star"></span>
                                i++;
                            }
                        }

                        else
                        {
                            <label>Não Avaliado</label>
                        }
                    </a>
                </li>
                <li>
                    <div id="Pages" style="margin-left:5%;margin-top:23px;">
                        <div class="dropdown">
                            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                                Páginas
                                <span class="caret"></span>
                            </button>
                            <ul id="sheetList" class="dropdown-menu"></ul>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</nav>



<div style="margin-top:85px">

    <div id="Filters">

        <!--
        <div class="dropdown">
            <button onclick="showOptions('Year')" class="dropbtn">Dropdown</button>
            <div id="Year" class="dropdown-content">
                <input type="text" placeholder="Search.." id="Input-Year" onkeyup="filterFunction('Year')">
                <a href="#about">About</a>

            </div>
        </div>
        <br />
        -->

    </div>
    <div id="Graphs">

    </div>
</div>
<script>

    var defaultDocumentHeight = document.body.scrollHeight;
    window.onscroll = function (oEvent) {
        if (document.body.scrollHeight > defaultDocumentHeight) {
            document.getElementById("Filters").style.marginTop = (window.scrollY) + "px";
        }
    }


</script>

<script>
    /* When the user clicks on the button,
    toggle between hiding and showing the dropdown content */
    function showOptions(filterId) {
        console.log(filterId);
        document.getElementById(filterId).classList.toggle("show");
    }

    function filterFunction(filterId) {
        var input, filter, ul, li, a, i;
        input = document.getElementById("Input-" + filterId);
        filter = input.value.toUpperCase();
        div = document.getElementById(filterId);
        a = div.getElementsByTagName("a");
        for (i = 0; i < a.length; i++) {
            txtValue = a[i].textContent || a[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                a[i].style.display = "";
            } else {
                a[i].style.display = "none";
            }
        }
    }
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://unpkg.com/mathjs/dist/math.min.js"></script>
<script language="JavaScript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/3.2.1/math.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3plus/2.0.0-alpha.14/d3plus.full.js"></script>
<script src="https://d3js.org/d3-hierarchy.v1.min.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.4.0/bootbox.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/alasql@0.6"></script>

<script src="~/terz/LTE/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/terz/LTE/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="~/terz/LTE/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/terz/LTE/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>

<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
<script src="https://cdn.amcharts.com/lib/4/maps.js"></script>
<script src="https://cdn.amcharts.com/lib/4/geodata/worldLow.js"></script>
<script src="https://covid.amCharts.com/data/js/world_timeline.js"></script>
<script src="https://covid.amCharts.com/data/js/total_timeline.js"></script>
<!-- AdminLTE App -->


<script src="~/terz/js/Operations.js"></script>
<script src="~/terz/js/Variables.js"></script>
<script src="~/terz/js/Filter.js"></script>
<script src="~/terz/js/Indicator.js"></script>
<script src="~/terz/js/Graph.js"></script>
<script src="~/terz/js/MapTimeLine.js"></script>
<script src="~/terz/js/Radar.js"></script>
<script src="~/terz/js/Pyramid.js"></script>
<script src="~/terz/js/CompareChart.js"></script>
<script src="~/terz/js/Gaugi.js"></script>
<script src="~/terz/js/Variance.js"></script>
<script src="~/terz/js/Waterfall.js"></script>
<script src="~/terz/js/LineDateCompareChart.js"></script>
<script src="~/terz/js/TextBlock.js"></script>
<script src="~/terz/js/VariableInput.js"></script>
<script>
    function on() {
        document.getElementById("overlay").style.display = "block";
    }

    function off() {
        document.getElementById("overlay").style.display = "none";
    }
    function AvaliatePage() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: 'Report/AvaliatePage',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {
                            var score = 5;

                            for (var i = 5; i > 0; i--) {
                                 if (document.getElementById("rating-" + i).checked) {
                                     score = i;
                                     break;
                                    }
                                }

                            Avaliate(score);


                        }
                    });

                },


            });
    }
    function Avaliate(score) {
        $.ajax(
            {
                type: 'POST',
                url: 'Report/Avaliate?id=@Model.Id&score=' + score,
                dataType: 'json',
                cache: false,
                async: true,
                success: function (data) {

                    alert(data);
                }

            });
    }

    function ShowInfo() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: 'Report/Sobre?id=@Model.Id',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            console.log("close info");

                        }
                    });

                },


            });
    }

        function ShowReference() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: 'Report/Referencias?id=@Model.Id',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            console.log("close info");

                        }
                    });

                },


            });
    }
    function init() {
        LoadConfigFormBrowse();
        loadUsingDataFrames();
        buildSheetMenu();
        buildFilter(currentSheet);
       
        buildIndicators(currentSheet);
        buildGraphs(currentSheet);
        buildTextBlocks(currentSheet);
        buildVariableInput(currentSheet);
        applyDefaultFilters(currentSheet);

    }

    function applyDefaultFilters(sheetOrder) {
        var sheet = reportData.config.sheets.filter(function (x) { return x.order == sheetOrder })[0];
        var filters = sheet.filters;
        var fLenght;
        if (filters == null) {
            fLenght = 0;
        }
        else {
            fLenght = filters.length;
        }
        for (var i = 0; i < fLenght; i++) {
            var filter = filters[i];
            if (filter.defaultValues != null && filter.defaultValues != "") {
                var filter = filters[i];
                var dfNames = filter.dataFrameName;
                var alldfs = "";
                for (var m = 0; m < dfNames.length; m++) {
                    alldfs += dfNames[m] + "&";
                }

                alldfs = alldfs.slice(0, -1);
                var values = filter.defaultValues.split(';');
                for (var j = 0; j < values.length; j++) {
                    var cellValue = alldfs + ',' + filter.dimension.field + ',' + values[j];
                    filterValue(cellValue);
                }
            }



        }
    }

    function buildSheetMenu() {

        var content = document.getElementById("sheetList");
        while (content.firstChild) {
            content.removeChild(content.lastChild);
        }

        var sheets = reportData.config.sheets.sort(function (a, b) {
            return parseInt(a.order) - parseInt(b.order);
        });
        for (var i = 0; i < sheets.length; i++) {
            var liSheet = document.createElement("li");
            var aSheet = document.createElement("a");
            aSheet.appendChild(document.createTextNode(sheets[i].name));
            aSheet.setAttribute("href", "#");
            aSheet.setAttribute("onclick", "changeSheet('" + sheets[i].order + "')");
            aSheet.style.fontFamily = "Arial";
            aSheet.style.paddingTop = "5px";
            aSheet.style.paddingBottom = "5px";
            if (sheets[i].order == currentSheet) {
                aSheet.style.backgroundColor = "#28b9e0";
            }
            liSheet.appendChild(aSheet);
            
            document.getElementById("sheetList").appendChild(liSheet);

        }
    }

    function filterValue(cellValue) {
        if (document.getElementById(cellValue).style.backgroundColor == 'green') {
            document.getElementById(cellValue).style.backgroundColor = 'white';
            removeFilter(cellValue);
            var dfs = cellValue.split(",")[0].split("&");
            for (var i = 0; i < dfs.length; i++) {
                applySelections(dfs[i]);
            }
            for (var i = 0; i < AllDFS.length; i++) {
                var dfNames = AllDFS[i].name.split(",");
                if (dfNames.length > 1 && dfNames.some(v => dfs.indexOf(v) !== -1)) {
                    applySelections(AllDFS[i].name);
                }
            }

            reloadGraphs();
        }
        else {
            document.getElementById(cellValue).style.backgroundColor = 'green';
            addFilter(cellValue);
            var dfs = cellValue.split(",")[0].split("&");
            for (var i = 0; i < dfs.length; i++) {
                applySelections(dfs[i]);
            }
            for (var i = 0; i < AllDFS.length; i++) {
                var dfNames = AllDFS[i].name.split(",");
                if (dfNames.length > 1 && dfNames.some(v => dfs.indexOf(v) !== -1)) {
                    applySelections(AllDFS[i].name);
                }
            }
            reloadGraphs();
        }
    }

    function addFilter(cellValue) {
        var valueMap = cellValue.split(",");
        var df = valueMap[0];

        var alldfs = df.split("&");

        var field = valueMap[1];
        var value = valueMap[2];

        for (var i = 0; i < alldfs.length; i++) {

            var cdf = alldfs[i];

            if (selections.filter(function (x) { return x.field == field && x.dataFrame == cdf }).length == 0) {
                var filterBlock = { dataFrame: cdf, field: field, value: [] };
                filterBlock.value.push(value);
                selections.push(filterBlock);
            }
            else {
                var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
                selections[pos].value.push(value);
            }
        }

        for (var i = 0; i < AllDFS.length; i++) {
            var dfNames = AllDFS[i].name.split(",");
            if (dfNames.length > 1 && dfNames.some(v => alldfs.indexOf(v) !== -1)) {
                var cdf = AllDFS[i].name;

                if (selections.filter(function (x) { return x.field == field && x.dataFrame == cdf }).length == 0) {
                    var filterBlock = { dataFrame: cdf, field: field, value: [] };
                    filterBlock.value.push(value);
                    selections.push(filterBlock);
                }
                else {
                    var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
                    selections[pos].value.push(value);
                }

            }
        }
    }

    function removeFilter(cellValue) {
        var valueMap = cellValue.split(",");
        var df = valueMap[0];
        var alldfs = df.split("&");
        var field = valueMap[1];
        var value = valueMap[2];

        for (var i = 0; i < alldfs.length; i++) {

            var cdf = alldfs[i];
            var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
            var posValue = selections[pos].value.indexOf(value);
            selections[pos].value.splice(posValue, 1);

        }

        for (var i = 0; i < AllDFS.length; i++) {
            var dfNames = AllDFS[i].name.split(",");
            if (dfNames.length > 1 && dfNames.some(v => alldfs.indexOf(v) !== -1)) {
                var cdf = AllDFS[i].name;
                var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
                var posValue = selections[pos].value.indexOf(value);
                selections[pos].value.splice(posValue, 1);
            }
        }

    }

    function clearFilterSelections(df,field) {
        var alldfs = df.split("&");

        for (var i = 0; i < alldfs.length; i++) {

            var cdf = alldfs[i];
            var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
            if (pos >= 0) {
                selections[pos].value = [];
                applySelections(cdf);
            }

        }

        for (var i = 0; i < AllDFS.length; i++) {
            var dfNames = AllDFS[i].name.split(",");
            if (dfNames.length > 1 && dfNames.some(v => alldfs.indexOf(v) !== -1)) {
                var cdf = AllDFS[i].name;
                var pos = selections.findIndex(i => i.field == field && i.dataFrame == cdf);
                if (pos >= 0) {
                    selections[pos].value = [];
                    applySelections(cdf);
                }
            }
        }

        var cells = document.getElementById(field).childNodes;
        for (var i = 0; i < cells.length; i++) {
            if (cells[i].nodeName.toLowerCase() == "a") {
                cells[i].style.backgroundColor = "white";
            }
        }

        reloadGraphs();


    }

    function filterFromGraph(df, field, value) {
        clearFilterSelections(df.join('&'), field);
        var filterString = df.join('&') + ',' + field + ',' + value;
        filterValue(filterString);
    }

    function clearAllSelections() {
        selections = [];
        for (var i = 0; i < AllDFS.length; i++) {
            applySelections(AllDFS[i].name);
        }

    }

    function loadUsingDataFrames() {

        if (!keepAllData) {
            AllDFS = JSON.parse(JSON.stringify(reportData.dataFrames));
            for (var i = 0; i < reportData.config.sheets.length; i++) {
                for (var j = 0; j < reportData.config.sheets[i].indicators.length; j++) {
                    var df = reportData.config.sheets[i].indicators[j].dataFrameName;
                    var dfs = df.join(",");
                    if (df.length > 1 && AllDFS.findIndex(i => i.name == dfs) == -1) {
                        var group = {};
                        group["name"] = dfs;
                        var table = JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == df[0] })[0].table));
                        for (var k = 1; k < df.length; k++) {
                            table = fulljoin(table, JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == df[k] })[0].table)));
                        }
                        group["table"] = table;
                        AllDFS.push(group);

                    }

                    let pattern = /[^\s]+\.externalDF\(.+?\)/g;
                    let res = pattern.exec(reportData.config.sheets[i].indicators[j].measure.expression);
                    while (res != null) {
                        var eExpression = res[0];
                        let ePattern = /externalDF\(.+?\)/g;
                        let eRes = ePattern.exec(eExpression)[0];
                        var edfs = eRes.replace('externalDF(', '').replace(')', '');
                        var edfNames = edfs.split(',');
                        if (AllDFS.findIndex(i => i.name == edfs) == -1) {
                            var group = {};
                            group["name"] = edfs;
                            var table = JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == edfNames[0] })[0].table));
                            for (var k = 1; k < edfNames.length; k++) {
                                table = fulljoin(table, JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == edfNames[k] })[0].table)));
                            }
                            group["table"] = table;
                            AllDFS.push(group);
                        }


                        res = pattern.exec(expression);
                    }

                }



                for (var j = 0; j < reportData.config.sheets[i].graphs.length; j++) {
                    var df = reportData.config.sheets[i].graphs[j].dataFrameName;
                    var dfs = df.join(",");
                    if (df.length > 1 && AllDFS.findIndex(i => i.name == dfs) == -1) {
                        var group = {};
                        group["name"] = dfs;
                        var table = JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == df[0] })[0].table));
                        for (var k = 1; k < df.length; k++) {
                            table = fulljoin(table, JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == df[k] })[0].table)));
                        }
                        group["table"] = table;
                        AllDFS.push(group);
                    }

                    for (l = 0; l < reportData.config.sheets[i].graphs[j].measures.length; l++) {
                        let pattern = /[^\s]+\.externalDF\(.+?\)/g;
                        let res = pattern.exec(reportData.config.sheets[i].graphs[j].measures[l].expression);
                        while (res != null) {
                            var eExpression = res[0];
                            let ePattern = /externalDF\(.+?\)/g;
                            let eRes = ePattern.exec(eExpression)[0];
                            var edfs = eRes.replace('externalDF(', '').replace(')', '');
                            var edfNames = edfs.split(',');
                            if (AllDFS.findIndex(i => i.name == edfs) == -1) {
                                var group = {};
                                group["name"] = edfs;
                                var table = JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == edfNames[0] })[0].table));
                                for (var k = 1; k < edfNames.length; k++) {
                                    table = fulljoin(table, JSON.parse(JSON.stringify(AllDFS.filter(function (x) { return x.name == edfNames[k] })[0].table)));
                                }
                                group["table"] = table;
                                AllDFS.push(group);
                            }


                            res = pattern.exec(expression);
                        }
                    }

                }


            }
        //    localStorage.setItem("TerzVersion-@Model.Id", version);
         //   localStorage.setItem("TerzConfig-@Model.Id", JSON.stringify(reportData.config));
          //  localStorage.setItem("TerzDataFrames-@Model.Id", JSON.stringify(AllDFS));
        }
        else {
            AllDFS = JSON.parse(browseDataFrames);

        }
        usingDataFrames = JSON.parse(JSON.stringify(AllDFS));
     }

        function LoadConfigFormBrowse() {
            if (keepAllData) {
                reportData = {};
                reportData["config"] = JSON.parse(browseConfig);
                reportData["dataFrames"] = JSON.parse(browseDataFrames);
            }
        }


    function reloadGraphs() {

        var graphs = document.getElementById("Graphs");
        while (graphs.firstChild) {
            graphs.removeChild(graphs.lastChild);
        }

        buildIndicators(currentSheet);
        buildGraphs(currentSheet);
        buildTextBlocks(currentSheet);
        buildVariableInput(currentSheet);
        hideNonExpandedObjects();

    }

    function expandGraph(id) {
        selectExpandGraph(id);
        reloadGraphs();
    }

    function restoreGraph() {
        restoreExpandGraphStyle();
        reloadGraphs();
    }


    function selectExpandGraph(id) {
        ExpandedGraph = id;
        var sheet = reportData.config.sheets.filter(function (x) { return x.order == currentSheet })[0];
        ExpandedGraphStyle = JSON.parse(JSON.stringify(sheet.graphs.filter(function (x) { return x.id == id })[0].style));
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var graphPos = reportData.config.sheets[sheetPos].graphs.map(function (e) { return e.id; }).indexOf(id);

        reportData.config.sheets[sheetPos].graphs[graphPos].style.width = "960";
        reportData.config.sheets[sheetPos].graphs[graphPos].style.height = "560";
        reportData.config.sheets[sheetPos].graphs[graphPos].style.x = "10";
        reportData.config.sheets[sheetPos].graphs[graphPos].style.y = "10";
    }

    function restoreExpandGraphStyle() {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var graphPos = reportData.config.sheets[sheetPos].graphs.map(function (e) { return e.id; }).indexOf(ExpandedGraph);

        reportData.config.sheets[sheetPos].graphs[graphPos].style = JSON.parse(JSON.stringify(ExpandedGraphStyle));

        ExpandedGraph = "";

    }

    function hideNonExpandedObjects() {
        if (ExpandedGraph == "") return;

        var sheet = reportData.config.sheets.filter(function (x) { return x.order == currentSheet })[0];
        var graphs = sheet.graphs;
        var indicators = sheet.indicators;
        var textBlocks = sheet.textBlocks;

        var gIds = graphs.map(function (g) {
            return g.id;
        });

        var iIds = indicators.map(function (i) {
            return i.id;
        });

        var tIds = textBlocks.map(function (t) {
            return t.id;
        });

        if (!gIds.includes(ExpandedGraph)) return;

        for (var i = 0; i < iIds.length; i++) {
            document.getElementById("ind" + iIds[i]).style.display = "none";
        }

        for (var i = 0; i < tIds.length; i++) {
            document.getElementById("txt" + tIds[i]).style.display = "none";
        }

        for (var i = 0; i < gIds.length; i++) {
            if (gIds[i] != ExpandedGraph)
                 document.getElementById("gc" + gIds[i]).style.display = "none";
        }

        
    }

    function reloadSheet() {

        var graphs = document.getElementById("Graphs");
        while (graphs.firstChild) {
            graphs.removeChild(graphs.lastChild);
        }

        var filters = document.getElementById("Filters");
        while (filters.firstChild) {
            filters.removeChild(filters.lastChild);
        }
        buildSheetMenu();

        buildFilter(currentSheet);
        buildIndicators(currentSheet);
        buildGraphs(currentSheet);
        buildTextBlocks(currentSheet);
        buildVariableInput(currentSheet);
        hideNonExpandedObjects();
        applyDefaultFilters(currentSheet);

    }

    function changeSheet(sheetOrder) {
        currentSheet = sheetOrder;
        clearAllSelections();
        reloadSheet();
    }

    function applySelections(name) {
        var dfSelections = selections.filter(function (x) { return x.dataFrame == name });
        var pos = usingDataFrames.map(function (e) { return e.name; }).indexOf(name);
        var completeTable = AllDFS.filter(function (x) { return x.name == name })[0].table;
        var filteredTable = [];
        var headers = completeTable[0];
        filteredTable.push(completeTable[0]);
        for (var i = 1; i < completeTable.length; i++) {
            var row = completeTable[i];
            var selectRow = true;
            for (j = 0; j < dfSelections.length; j++) {
                var selection = dfSelections[j];
                if (selection.value.length != 0) {
                    var fieldPos = headers.indexOf(selection.field);
                    if (!selection.value.includes(row[fieldPos])) {
                        selectRow = false;
                    }
                }
            }

            if (selectRow) {
                filteredTable.push(row);
            }
        }
        console.log(filteredTable);
        usingDataFrames[pos].table = filteredTable;

    }

     function verifyVersion(){


        $.ajax(
            {
                type: 'POST',
                url: 'Report/getReportVersion?id=@Model.Id',
                dataType: 'json',
                cache: false,
                async: true,
                success: function (data) {

                    version = data;
                    var browseVersion = localStorage.getItem("TerzVersion-@Model.Id");
                    if (version != browseVersion) {
                        keepAllData = false;
                    }
                    browseDataFrames = localStorage.getItem("TerzDataFrames-@Model.Id");
                    browseConfig = localStorage.getItem("TerzConfig-@Model.Id");

                    if (browseDataFrames == null || browseDataFrames == "" || browseConfig == null || browseConfig == "") {
                        keepAllData = false;
                    }

                    LoadData();


                }

            });


    }



    function LoadOdag() {
         var form;
        $.ajax(
            {
                type: 'POST',
                url: 'Odag/OdagPage?id=@Model.Id',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            GetReportData(OdagSelections,true);

                        }
                    });

                },


            });
    }

    function LoadData() {
        if (!keepAllData) {

             $.ajax(
            {
                type: 'POST',
                 url: 'Odag/VerifiyOdag?id=@Model.Id',
                dataType: 'html',
                cache: false,
                async: true,
                success: function (data) {

                    if (data == "enabled") {
                        LoadOdag();
                    }
                    else {
                        GetReportData(null,false);
                    }

                        


                   
                }

            });




            
        }
        else {
            init();
        }
    }

    function GetReportData(odagSelections,isOdag){

        on();


        if (isOdag) {
             $.ajax(
            {
                type: 'POST',
                url: 'Report/GetReportFilteredData?id=@Model.Id',
                dataType: 'json',
                cache: false,
                contentType: "application/json; charset=utf-8",
                async: true,
                     success: function (data) {

                     reportData = data;
                    init();
                    off();
                    
                     },
                     data: JSON.stringify(odagSelections)

            });
        }
        else {
            $.ajax(
                {
                    type: 'POST',
                    url: 'Report/GetReportData?id=@Model.Id',
                    dataType: 'json',
                    cache: false,
                    async: true,
                    success: function (data) {

                        reportData = data;




                        init();
                        off();
                    }

                });

        }
    }

        verifyVersion();

</script>
