@model Terz.Models.Editor.EditorView
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
<link rel="stylesheet" href="~/css/Editor.css" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<link rel="stylesheet" href="~/LTE/plugins/fontawesome-free/css/all.min.css">
<link rel="stylesheet" href="~/LTE/plugins/fontawesome-free/css/all.css">
<link rel="stylesheet" href="~/LTE/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/LTE/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<!-- Theme style -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>

<div id="Menu" style="margin-left:5px;margin-top:10px;display:flex;border-bottom:2px solid #32bab6;padding-bottom:10px">
    <div class="dropdown">
        <button style="width:160px;height:40px;" class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            Paginas
            <span class="caret"></span>
        </button>
        <ul id="sheetList" class="dropdown-menu"></ul>
    </div>
    <button class="menuButton" onclick="addIndicador()"><i class="fas fa-tachometer-alt"></i> Indicador</button>
    <button class="menuButton" onclick="AddGraph()"><i class="fas fa-chart-pie"></i> Gráfico</button>
    <button class="menuButton" onclick="addTextBlock()"><i class="fas fa-font"></i>  Texto</button>
    <button class="menuButton" onclick="buildFilterSettings()"><i class="fas fa-filter"></i> Filtros</button>
    <button class="menuButton" onclick="SaveReport()"><i class="fas fa-save"></i> Salvar</button>
    <img style="margin-left:400px" height="40" width="40" src="~/images/Terz_Logo.png" />
</div>
<div id="Pages" style="margin-left:15px;margin-top:10px;">

</div>
<div>
    <div id="Sheet">
        <div id="Graphs" class="resize-container"></div>
    </div>
    <div id="Settings" overflow-y: scroll; style="height:700px">

    </div>
</div>



<script src="https://unpkg.com/mathjs/dist/math.min.js"></script>
<script language="JavaScript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/3.2.1/math.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3plus/2.0.0-alpha.14/d3plus.full.js"></script>
<script src="https://d3js.org/d3-hierarchy.v1.min.js"></script>

<script src="~/LTE/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/LTE/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="~/LTE/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/LTE/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<!-- AdminLTE App -->


<script src="~/js/Operations.js"></script>
<script src="~/js/Variables.js"></script>
<script src="~/js/Filter.js"></script>
<script src="~/js/Indicator.js"></script>
<script src="~/js/Graph.js"></script>
<script src="~/js/Settings.js"></script>
<script src="~/js/TextBlock.js"></script>
<script type="module">
    import interact from
        'https://cdn.interactjs.io/v1.9.19/interactjs/index.js'

    function dragMoveListener(event) {
        var target = event.target
        // keep the dragged position in the data-x/data-y attributes
        var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
        var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

        // translate the element
        target.style.webkitTransform =
            target.style.transform =
            'translate(' + x + 'px, ' + y + 'px)'

        // update the posiion attributes
        target.setAttribute('data-x', x)
        target.setAttribute('data-y', y)
    }

    // this function is used later in the resizing and gesture demos
    window.dragMoveListener = dragMoveListener;

    interact('.resize-drag')
        .draggable({
            onmove: window.dragMoveListener
        })
        .resizable({
            preserveAspectRatio: false,
            edges: { left: true, right: true, bottom: true, top: true }
        })
        .on('resizemove', function (event) {
            var target = event.target,
                x = (parseFloat(target.getAttribute('data-x')) || 0),
                y = (parseFloat(target.getAttribute('data-y')) || 0);

            // update the element's style
            target.style.width = event.rect.width + 'px';
            target.style.height = event.rect.height + 'px';

            // translate when resizing from top or left edges
            x += event.deltaRect.left;
            y += event.deltaRect.top;

            target.style.webkitTransform = target.style.transform =
                'translate(' + x + 'px,' + y + 'px)';

            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);

            //   target.textContent = event.rect.width + '×' + event.rect.height;
        });



</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.4.0/bootbox.min.js"></script>
<script>


    function ExpMeasure(graphId, measureId) {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: '../Editor/MeasureExp?id=' + measureId,
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            document.getElementById("measureExp" + measureId).value = document.getElementById("measureExp").value;
                            updateGraphConfig(graphId);


                        }

                    });

                },




            });
    }

    function ExpIndicator(id) {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: '../Editor/IndiacatorExp',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            document.getElementById("Expression").value = document.getElementById("indExp").value;
                            updateIndicatorConfig(id);


                        }

                    });

                },




            });
    }

    function addIndicador() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: '../Editor/AddIndicador',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            var indicador = {};
                            indicador["id"] = Date.now().toString();
                            indicador["dataFrameName"] = document.getElementById("DataFrameAdd").value;
                            var style = {};
                            style["id"] = Date.now().toString();
                            style["width"] = document.getElementById("WidthAdd").value;
                            style["height"] = document.getElementById("HeightAdd").value;
                            style["x"] = document.getElementById("XAdd").value;
                            style["y"] = document.getElementById("YAdd").value;
                            style["backgroundColor"] = document.getElementById("BackgroundColorAdd").value;
                            style["textColor"] = document.getElementById("TextColorAdd").value;
                            style["fontSize"] = document.getElementById("FontSizeAdd").value;

                            indicador["style"] = style;

                            var measure = {};
                            measure["id"] = Date.now().toString();
                            measure["name"] = document.getElementById("MeasureNameAdd").value;
                            measure["expresion"] = document.getElementById("ExpressionAdd").value;

                            indicador["measure"] = measure;

                            var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
                            reportData.config.sheets[sheetPos].indicators.push(indicador);

                            reloadSheet();
                            setObjEvents();

                        }

                    });

                },




            });
    }

    function addTextBlock() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: '../Editor/AddTextBlock',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            var textBlock = {};
                            textBlock["id"] = Date.now().toString();

                            var style = {};
                            style["id"] = Date.now().toString();
                            style["width"] = document.getElementById("WidthAdd").value;
                            style["height"] = document.getElementById("HeightAdd").value;
                            style["x"] = document.getElementById("XAdd").value;
                            style["y"] = document.getElementById("YAdd").value;


                            textBlock["style"] = style;
                            textBlock["text"] = document.getElementById("TextAdd").value;


                            var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
                            reportData.config.sheets[sheetPos].textBlocks.push(textBlock);

                            reloadSheet();
                            setObjEvents();

                        }

                    });

                },




            });
    }

    function AddGraph() {
        var form;
        $.ajax(
            {
                type: 'POST',
                url: '../Editor/AddGraph',
                dataType: 'html',
                cache: false,
                async: true,

                success: function (data) {
                    form = data;
                    bootbox.confirm(form, function (result) {
                        if (result) {

                            var graph = {};
                            graph["id"] = Date.now().toString();
                            graph["dataFrameName"] = document.getElementById("DataFrameAdd").value;
                            graph["title"] = document.getElementById("TitleAdd").value;
                            graph["objectType"] = document.getElementById("TipoAdd").value;
                            var style = {};
                            style["id"] = Date.now().toString();
                            style["width"] = document.getElementById("WidthAdd").value;
                            style["height"] = document.getElementById("HeightAdd").value;
                            style["x"] = document.getElementById("XAdd").value;
                            style["y"] = document.getElementById("YAdd").value;


                            graph["style"] = style;

                            graph["measures"] = [];
                            graph["dimensions"] = [];



                            var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
                            reportData.config.sheets[sheetPos].graphs.push(graph);

                            reloadSheet();
                            setObjEvents();

                        }

                    });

                },




            });
    }

    function AddSheet() {
        var sheet = {}
        sheet["id"] = Date.now().toString();
        sheet["name"] = "Nova Pasta";
        sheet["order"] = (reportData.config.sheets.length + 1).toString();
        sheet["graphs"] = [];
        sheet["indicators"] = [];
        sheet["filters"] = [];

        reportData.config.sheets.push(sheet);
        buildSheetMenu();
        changeSheet(sheet["order"]);

    }

    var ConfigBackup;

      function init() {
        loadUsingDataFrames();
        buildSheetMenu();
        buildIndicators(currentSheet);
          buildGraphs(currentSheet);
          buildTextBlocks(currentSheet);
          setObjEvents();
          ConfigBackup = JSON.parse(JSON.stringify(reportData.config));

    }
    function updateSheetConfig(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.id; }).indexOf(id);
        reportData.config.sheets[sheetPos].name = document.getElementById("sheetName").value;
        buildSheetMenu();


    }

    function updateFilterConfig(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var filterPos = reportData.config.sheets[sheetPos].filters.map(function (e) { return e.id; }).indexOf(id);
        reportData.config.sheets[sheetPos].filters[filterPos].dataFrameName[0] = document.getElementById("DataFrame" + id).value;
        reportData.config.sheets[sheetPos].filters[filterPos].dimension.name = document.getElementById("filterName" + id).value;
        reportData.config.sheets[sheetPos].filters[filterPos].dimension.field = document.getElementById("filterField" + id).value;
        buildFilterSettings();
    }

    function updateIndicatorConfig(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var indicatorPos = reportData.config.sheets[sheetPos].indicators.map(function (e) { return e.id; }).indexOf(id);
        reportData.config.sheets[sheetPos].indicators[indicatorPos].dataFrameName = document.getElementById("DataFrame").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].measure.name = document.getElementById("MeasureName").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].measure.expresion = document.getElementById("Expression").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].measure.numberFormat = document.getElementById("Format").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.width = document.getElementById("Width").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.height = document.getElementById("Height").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.x = document.getElementById("X").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.y = document.getElementById("Y").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.backgroundColor = document.getElementById("BackgroundColor").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.textColor = document.getElementById("TextColor").value;
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.fontSize = document.getElementById("FontSize").value;



        reloadSheet();
        setObjEvents();
    }

    function updateTextBlockConfig(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var textBlockPos = reportData.config.sheets[sheetPos].textBlocks.map(function (e) { return e.id; }).indexOf(id);

        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].text = document.getElementById("textarea").value;
        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.width = document.getElementById("Width").value;
        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.height = document.getElementById("Height").value;
        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.x = document.getElementById("X").value;
        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.y = document.getElementById("Y").value;

        reloadSheet();
        setObjEvents();
    }



    function updateIndicatorDimensions(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var indicatorPos = reportData.config.sheets[sheetPos].indicators.map(function (e) { return e.id; }).indexOf(id);
        var transform = document.getElementById("ind" + id).style.transform.replace('translate', '').replace('(', '').replace(')', '').replace('px', '').replace('px', '').split(',');

        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.width = parseInt(document.getElementById("ind" + id).style.width);
        reportData.config.sheets[sheetPos].indicators[indicatorPos].style.height = parseInt(document.getElementById("ind" + id).style.height);
        if (transform != "" && transform != null) {
            var x = parseInt(reportData.config.sheets[sheetPos].indicators[indicatorPos].style.x) + parseInt(transform[0]);
            reportData.config.sheets[sheetPos].indicators[indicatorPos].style.x = x.toString();
            var y = parseInt(reportData.config.sheets[sheetPos].indicators[indicatorPos].style.y) + parseInt(transform[1]);
            reportData.config.sheets[sheetPos].indicators[indicatorPos].style.y = y.toString();
        }
       reloadSheet();
        setObjEvents();
        buildIndicatorSettings(id);
    }

    function updateGraphDimensions(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var graphPos = reportData.config.sheets[sheetPos].graphs.map(function (e) { return e.id; }).indexOf(id);
        var transform = document.getElementById("gc" + id).style.transform.replace('translate', '').replace('(', '').replace(')', '').replace('px', '').replace('px', '').split(',');

        reportData.config.sheets[sheetPos].graphs[graphPos].style.width = parseInt(document.getElementById("gc" + id).style.width);
        reportData.config.sheets[sheetPos].graphs[graphPos].style.height = parseInt(document.getElementById("gc" + id).style.height);
        if (transform != "" && transform != null) {
            var x = parseInt(reportData.config.sheets[sheetPos].graphs[graphPos].style.x) + parseInt(transform[0]);
            reportData.config.sheets[sheetPos].graphs[graphPos].style.x = x.toString();
            var y = parseInt(reportData.config.sheets[sheetPos].graphs[graphPos].style.y) + parseInt(transform[1]);
            reportData.config.sheets[sheetPos].graphs[graphPos].style.y = y.toString();
        }

        reloadSheet();
        setObjEvents();
        buildGraphSettings(id);
    }

    function updateTextBlockDimensions(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var textBlockPos = reportData.config.sheets[sheetPos].textBlocks.map(function (e) { return e.id; }).indexOf(id);
        var transform = document.getElementById("txt" + id).style.transform.replace('translate', '').replace('(', '').replace(')', '').replace('px', '').replace('px', '').split(',');

        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.width = parseInt(document.getElementById("txt" + id).style.width);
        reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.height = parseInt(document.getElementById("txt" + id).style.height);
        if (transform != "" && transform != null) {
            var x = parseInt(reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.x) + parseInt(transform[0]);
            reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.x = x.toString();
            var y = parseInt(reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.y) + parseInt(transform[1]);
            reportData.config.sheets[sheetPos].textBlocks[textBlockPos].style.y = y.toString();
        }

        reloadSheet();
        setObjEvents();
        buildTextBlockSettings(id);
    }

    function updateGraphConfig(id) {
        var sheetPos = reportData.config.sheets.map(function (e) { return e.order; }).indexOf(currentSheet);
        var graphPos = reportData.config.sheets[sheetPos].graphs.map(function (e) { return e.id; }).indexOf(id);

        reportData.config.sheets[sheetPos].graphs[graphPos].dataFrameName = document.getElementById("DataFrame").value;

        reportData.config.sheets[sheetPos].graphs[graphPos].style.width = document.getElementById("Width").value;
        reportData.config.sheets[sheetPos].graphs[graphPos].style.height = document.getElementById("Height").value;
        reportData.config.sheets[sheetPos].graphs[graphPos].style.x = document.getElementById("X").value;
        reportData.config.sheets[sheetPos].graphs[graphPos].style.y = document.getElementById("Y").value;
        if (reportData.config.sheets[sheetPos].graphs[graphPos].objectType == 'bar') {
            reportData.config.sheets[sheetPos].graphs[graphPos].style.orientation = document.getElementById("Orientation").value;
            reportData.config.sheets[sheetPos].graphs[graphPos].style.stack = document.getElementById("Stack").checked;
        }
       

        for (var i = 0; i < reportData.config.sheets[sheetPos].graphs[graphPos].dimensions.length; i++) {
            var dimId = reportData.config.sheets[sheetPos].graphs[graphPos].dimensions[i].id;
            reportData.config.sheets[sheetPos].graphs[graphPos].dimensions[i].name = document.getElementById("dimname" + dimId).value;
            reportData.config.sheets[sheetPos].graphs[graphPos].dimensions[i].field = document.getElementById("dimfield" + dimId).value;
        }

        for (var i = 0; i < reportData.config.sheets[sheetPos].graphs[graphPos].measures.length; i++) {
            var measureId = reportData.config.sheets[sheetPos].graphs[graphPos].measures[i].id;
            reportData.config.sheets[sheetPos].graphs[graphPos].measures[i].name = document.getElementById("measureName" + measureId).value;
            reportData.config.sheets[sheetPos].graphs[graphPos].measures[i].expresion = document.getElementById("measureExp" + measureId).value;
            reportData.config.sheets[sheetPos].graphs[graphPos].measures[i].numberFormat = document.getElementById("FormatMeasure" + measureId).value;
        }

        
        

        reportData.config.sheets[sheetPos].graphs[graphPos].sort = {
           
            type: document.getElementById("SortType").value,
            option: document.getElementById("SortOption").value,
            axis: document.getElementById("SortAxis").value
        };

        switch (reportData.config.sheets[sheetPos].graphs[graphPos].objectType) {
            case 'bar': { updateBarChart(sheetPos, graphPos); break; }
            case 'pie': { updatePieChart(sheetPos, graphPos); break; }
            case 'line': { updateLineChart(sheetPos, graphPos); break; }
            case 'tree': { updateTreeMap(sheetPos, graphPos); break; }
            default: break;
        }

        reloadSheet();
        setObjEvents();
    }

    function updateBarChart(sheetPos, graphPos) {


    }

    function updatePieChart(sheetPos, graphPos) {

    }

    function updateLineChart(sheetPos, graphPos) {

    }

    function updateTreeMap(sheetPos, graphPos) {

    }


    function setObjEvents() {
        var sheets = reportData.config.sheets.filter(function (x) { return x.order == currentSheet });
        var sLenght;
        if (sheets == null) {
            sLenght = 0;
        }
        else {
            sLenght = sheets.length;
        }
        for (var i = 0; i < sLenght; i++) {
            var sheet = sheets[i];
            //indicator
            var indicators = sheet.indicators;
            var iLenght;
            if (indicators == null) {
                iLenght = 0;
            }
            else {
                iLenght = indicators.length;
            }
            for (var j = 0; j < iLenght; j++) {
                var indicator = indicators[j];
                document.getElementById("ind" + indicator.id).setAttribute("onclick", "indicatorSettings('" + indicator.id + "')");
                document.getElementById("ind" + indicator.id).setAttribute("onmouseup", "updateIndicatorDimensions('" + indicator.id + "')");
            }
            //graph
            var graphs = sheet.graphs;
            var gLenght;
            if (graphs == null) {
                gLenght = 0;
            }
            else {
                gLenght = graphs.length;
            }
            for (var j = 0; j < gLenght; j++) {
                var graph = graphs[j];
                document.getElementById("gc" + graph.id).setAttribute("onclick", "graphSettings('" + graph.id + "')");
                document.getElementById("gc" + graph.id).setAttribute("onmouseup", "updateGraphDimensions('" + graph.id + "')");
            }

            //txt
            var textBlocks = sheet.textBlocks;
            var tLenght;
            if (textBlocks == null) {
                tLenght = 0;
            }
            else {
                tLenght = textBlocks.length;
            }
            for (var j = 0; j < tLenght; j++) {
                var textBlock = textBlocks[j];
                document.getElementById("txt" + textBlock.id).setAttribute("onclick", "textBlockSettings('" + textBlock.id + "')");
                document.getElementById("txt" + textBlock.id).setAttribute("onmouseup", "updateTextBlockDimensions('" + textBlock.id + "')");
            }

        }
    }

    function indicatorSettings(id) {
        buildIndicatorSettings(id);
    }
    function graphSettings(id) {
        buildGraphSettings(id);
    }
    function textBlockSettings(id) {
        buildTextBlockSettings(id);
    }
    function reloadGraph(id) {
        var graphId = id.substr(2);
        var graph = reportData.config.sheets.filter(function (x) { return x.order == sheetOrder })[0].graphs.filter(function (y) { return y.id == graphId })[0];
        switch (graph.objectType) {

            case 'bar': { buildBarChart(graph); break; }
            case 'pie': { buildPieChart(graph); break; }
            case 'line': { buildLineChart(graph); break; }
            case 'tree': { buildTreeMap(graph); break; }
            default: break;


        }
    }

    function buildSheetMenu() {
        var content = document.getElementById("sheetList");
        while (content.firstChild) {
            content.removeChild(content.lastChild);
        }

        var sheets = reportData.config.sheets;
        for (var i = 0; i < sheets.length; i++) {
            var liSheet = document.createElement("li");
            var aSheet = document.createElement("a");
            aSheet.appendChild(document.createTextNode(sheets[i].name));
            aSheet.setAttribute("href", "#");
            aSheet.setAttribute("onclick", "changeSheet('" + sheets[i].order + "')");
            liSheet.appendChild(aSheet);
            var editbutton = document.createElement("button");
            var editIcon = document.createElement("i");
            editIcon.setAttribute("class", "fa fa-edit");
            editbutton.appendChild(editIcon);
            editbutton.setAttribute("onclick", "buildSheetSettings('" + sheets[i].id + "')");

            liSheet.appendChild(editbutton);
            document.getElementById("sheetList").appendChild(liSheet);

        }

        var liAddSheet = document.createElement("li");
        var buttonSheet = document.createElement("button");
        buttonSheet.appendChild(document.createTextNode("Nova Pasta"));
        buttonSheet.setAttribute("href", "#");
        buttonSheet.setAttribute("onclick", "AddSheet()");
        liAddSheet.appendChild(buttonSheet);
        document.getElementById("sheetList").appendChild(liAddSheet);


    }







    function loadUsingDataFrames() {


        usingDataFrames = JSON.parse(JSON.stringify(reportData.dataFrames));
    }


    function reloadSheet() {
        var graphs = document.getElementById("Graphs");
        while (graphs.firstChild) {
            graphs.removeChild(graphs.lastChild);
        }


        buildIndicators(currentSheet);
        buildGraphs(currentSheet);
        buildTextBlocks(currentSheet);
    }

    function changeSheet(sheetOrder) {
        currentSheet = sheetOrder;
        reloadSheet();
        setObjEvents();
    }






    function GetReportData(){


        $.ajax(
            {
                type: 'POST',
                url: 'Report/GetReportData?id=@Model.Id',
                dataType: 'json',
                cache: false,
                async: true,
                success: function (data) {

                    reportData = data;

                    init();
                }

            });


    }

    function SaveReport() {
        $.ajax(
            {
                type: 'POST',
                url: 'Editor/UploadConfig?id=@Model.Id',
                dataType: 'json',
                cache: false,
                async: true,
                success: function (data) {

                    alert(data);
                },
                data: reportData.config

            });
    }

    GetReportData();
</script>